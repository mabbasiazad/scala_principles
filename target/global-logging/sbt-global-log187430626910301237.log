[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\mabba\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\mabba\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.2 (Oracle Corporation Java 17.0.5)
[debug]       Load.loadUnit: plugins took 561.1532ms
[debug]       Load.loadUnit: defsScala took 4.3657ms
[debug] [Loading] Scanning directory C:\Users\mabba\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\mabba\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 140.9136 ms
[debug]           Load.resolveProject(global-plugins) took 144.076ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\mabba\.sbt\1.0\plugins, plugins: List(<none>))) took 546.1581ms
[debug] [Loading] Done in C:\Users\mabba\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 759.1648ms
[debug]       Load.loadUnit: cleanEvalClasses took 1.19ms
[debug]     Load.loadUnit(file:/C:/Users/mabba/.sbt/1.0/plugins/, ...) took 1381.5913ms
[debug]   Load.apply: load took 2592.6983ms
[debug]   Load.apply: resolveProjects took 21.8616ms
[debug]   Load.apply: finalTransforms took 258.8811ms
[debug]   Load.apply: config.delegates took 54.7651ms
[debug]   Load.apply: Def.make(settings)... took 2080.825ms
[debug]   Load.apply: structureIndex took 420.974ms
[debug]   Load.apply: mkStreams took 7.9632ms
[info] loading global plugins from C:\Users\mabba\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 10438.568ms
[debug]           Load.loadUnit: plugins took 51.2295ms
[debug]           Load.loadUnit: defsScala took 0.0043ms
[debug] [Loading] Scanning directory C:\Users\mabba\OneDrive\Desktop\intrlliJ_Proj\ScalaProject\progfun\project
[debug]             Load.loadUnit: mkEval took 18.883ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\mabba\OneDrive\Desktop\intrlliJ_Proj\ScalaProject\progfun\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.3258 ms
[info] loading settings for project progfun-build from idea.sbt ...
[debug]               Load.resolveProject(progfun-build) took 14.4012ms
[debug]             Load.loadTransitive: finalizeProject(Project(id progfun-build, base: C:\Users\mabba\OneDrive\Desktop\intrlliJ_Proj\ScalaProject\progfun\project, plugins: List(<none>))) took 18.5883ms
[debug] [Loading] Done in C:\Users\mabba\OneDrive\Desktop\intrlliJ_Proj\ScalaProject\progfun\project, returning: (progfun-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 472.5442ms
[debug]           Load.loadUnit: cleanEvalClasses took 25.2386ms
[debug]         Load.loadUnit(file:/C:/Users/mabba/OneDrive/Desktop/intrlliJ_Proj/ScalaProject/progfun/project/, ...) took 550.6079ms
[debug]       Load.apply: load took 553.4851ms
[debug]       Load.apply: resolveProjects took 0.191ms
[debug]       Load.apply: finalTransforms took 25.9769ms
[debug]       Load.apply: config.delegates took 1.0738ms
[debug]       Load.apply: Def.make(settings)... took 150.4938ms
[debug]       Load.apply: structureIndex took 57.9099ms
[debug]       Load.apply: mkStreams took 0.0023ms
[info] loading project definition from C:\Users\mabba\OneDrive\Desktop\intrlliJ_Proj\ScalaProject\progfun\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1721.6355ms
[debug]     Load.loadUnit: defsScala took 0.0067ms
[debug] [Loading] Scanning directory C:\Users\mabba\OneDrive\Desktop\intrlliJ_Proj\ScalaProject\progfun
[debug]       Load.loadUnit: mkEval took 0.5791ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.5701 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 87.6753ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\mabba\OneDrive\Desktop\intrlliJ_Proj\ScalaProject\progfun, plugins: List(<none>))) took 95.5719ms
[debug] [Loading] Done in C:\Users\mabba\OneDrive\Desktop\intrlliJ_Proj\ScalaProject\progfun, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 270.4787ms
[debug]     Load.loadUnit: cleanEvalClasses took 51.5147ms
[debug]   Load.loadUnit(file:/C:/Users/mabba/OneDrive/Desktop/intrlliJ_Proj/ScalaProject/progfun/, ...) took 2045.4913ms
[debug] Load.apply: load took 2048.8096ms
[debug] Load.apply: resolveProjects took 0.2196ms
[debug] Load.apply: finalTransforms took 53.7611ms
[debug] Load.apply: config.delegates took 0.5711ms
[debug] Load.apply: Def.make(settings)... took 154.8663ms
[debug] Load.apply: structureIndex took 49.5326ms
[debug] Load.apply: mkStreams took 0.0031ms
[info] set current project to progfun (in build file:/C:/Users/mabba/OneDrive/Desktop/intrlliJ_Proj/ScalaProject/progfun/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 60661 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 60661, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to progfun (in build file:/C:/Users/mabba/OneDrive/Desktop/intrlliJ_Proj/ScalaProject/progfun/)
[debug] > Exec(idea-shell, None, None)
